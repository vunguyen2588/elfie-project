"use strict";
/* eslint-disable no-eval, @babel/new-cap */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configure = exports.setupBrowser = exports.within = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const dom_1 = require("@testing-library/dom");
require("simmerjs");
const DOM_TESTING_LIBRARY_UMD_PATH = path_1.default.join(require.resolve('@testing-library/dom'), '../../', 'dist/@testing-library/dom.umd.js');
const DOM_TESTING_LIBRARY_UMD = fs_1.default
    .readFileSync(DOM_TESTING_LIBRARY_UMD_PATH)
    .toString()
    .replace('define.amd', 'false'); // Never inject DTL using AMD define function
const SIMMERJS = fs_1.default
    .readFileSync(require.resolve('simmerjs/dist/simmer.js'))
    .toString();
let _config;
function isContainerWithExecute(container) {
    return container.execute != null;
}
function findContainerWithExecute(container) {
    let curContainer = container.parent;
    while (!isContainerWithExecute(curContainer)) {
        curContainer = curContainer.parent;
    }
    return curContainer;
}
async function injectDOMTestingLibrary(container) {
    const containerWithExecute = findContainerWithExecute(container);
    const shouldInject = await containerWithExecute.execute(function () {
        return {
            domTestingLibrary: !window.TestingLibraryDom,
            simmer: !window.Simmer,
        };
    });
    if (shouldInject.domTestingLibrary) {
        await containerWithExecute.execute(function (library) {
            // add DOM Testing Library to page as a script tag to support Firefox
            if (navigator.userAgent.includes('Firefox')) {
                const script = document.createElement('script');
                script.innerHTML = library;
                return document.head.append(script);
            }
            // eval library on other browsers
            return eval(library);
        }, DOM_TESTING_LIBRARY_UMD);
    }
    if (shouldInject.simmer) {
        await containerWithExecute.execute(SIMMERJS);
    }
    await containerWithExecute.execute(function (config) {
        window.TestingLibraryDom.configure(config);
    }, _config);
}
function serializeObject(object) {
    return Object.entries(object)
        .map(([key, value]) => [
        key,
        serializeArg(value),
    ])
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {
        serialized: 'object',
    });
}
function serializeArg(arg) {
    if (arg instanceof RegExp) {
        return { serialized: 'RegExp', RegExp: arg.toString() };
    }
    if (typeof arg === 'undefined') {
        return { serialized: 'Undefined', Undefined: true };
    }
    if (arg && typeof arg === 'object') {
        return serializeObject(arg);
    }
    return arg;
}
function executeQuery(query, container, ...args) {
    const done = args.pop();
    function deserializeObject(object) {
        return Object.entries(object)
            .map(([key, value]) => [key, deserializeArg(value)])
            .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
    }
    function deserializeArg(arg) {
        if (typeof arg === 'object' && arg.serialized === 'RegExp') {
            return eval(arg.RegExp);
        }
        if (typeof arg === 'object' && arg.serialized === 'Undefined') {
            return undefined;
        }
        if (typeof arg === 'object') {
            return deserializeObject(arg);
        }
        return arg;
    }
    const [matcher, options, waitForOptions] = args.map(deserializeArg);
    void (async () => {
        let result = null;
        try {
            // Override RegExp to fix 'matcher instanceof RegExp' check on Firefox
            window.RegExp = RegExp;
            result = await window.TestingLibraryDom[query](container, matcher, options, waitForOptions);
        }
        catch (e) {
            return done(e.message);
        }
        if (!result) {
            return done(null);
        }
        function makeSelectorResult(element) {
            // use simmer if possible to allow element refetching by position, otherwise
            // situations such as a React key change causes refetching to fail.
            const selector = window.Simmer(element);
            if (selector)
                return { selector };
            // use generated element id as selector if Simmer fails
            const elementIdAttributeName = 'data-wdio-testing-lib-element-id';
            let elementId = element.getAttribute(elementIdAttributeName);
            // if id doesn't already exist create one and add it to element
            if (!elementId) {
                elementId = (Math.abs(Math.random()) * 1000000000000).toFixed(0);
                element.setAttribute(elementIdAttributeName, elementId);
            }
            return { selector: `[${elementIdAttributeName}="${elementId}"]` };
        }
        if (Array.isArray(result)) {
            return done(result.map(makeSelectorResult));
        }
        return done(makeSelectorResult(result));
    })();
}
function createQuery(container, queryName) {
    return async (...args) => {
        await injectDOMTestingLibrary(container);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const result = await findContainerWithExecute(container).executeAsync(executeQuery, queryName, container, ...args.map(serializeArg));
        if (typeof result === 'string') {
            throw new Error(result);
        }
        if (!result) {
            return null;
        }
        if (Array.isArray(result)) {
            return Promise.all(result.map(({ selector }) => container.$(selector)));
        }
        return container.$(result.selector);
    };
}
function within(element) {
    return Object.keys(dom_1.queries).reduce((queries, queryName) => ({
        ...queries,
        [queryName]: createQuery(element, queryName),
    }), {});
}
exports.within = within;
/*
eslint-disable
@typescript-eslint/no-explicit-any,
@typescript-eslint/no-unsafe-argument
*/
function setupBrowser(browser) {
    const queries = {};
    Object.keys(dom_1.queries).forEach((key) => {
        const queryName = key;
        const query = async (...args) => {
            const body = await browser.$('body');
            return within(body)[queryName](...args);
        };
        // add query to response queries
        queries[queryName] = query;
        // add query to BrowserObject and Elements
        browser.addCommand(queryName, query);
        browser.addCommand(queryName, function (...args) {
            return within(this)[queryName](...args);
        }, true);
        // add chainable query to BrowserObject and Elements
        browser.addCommand(`${queryName}$`, query);
        browser.addCommand(`${queryName}$`, function (...args) {
            return within(this)[queryName](...args);
        }, true);
    });
    return queries;
}
exports.setupBrowser = setupBrowser;
/*
eslint-enable
@typescript-eslint/no-explicit-any,
@typescript-eslint/no-unsafe-argument
*/
function configure(config) {
    _config = config;
}
exports.configure = configure;
__exportStar(require("./types"), exports);
